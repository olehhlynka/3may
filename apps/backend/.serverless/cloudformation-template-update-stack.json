{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "PostItemLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/threemay-dev-post-item"
      }
    },
    "GetItemsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/threemay-dev-get-items"
      }
    },
    "DeleteItemLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/threemay-dev-delete-item"
      }
    },
    "GetSingleItemLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/threemay-dev-get-item"
      }
    },
    "UpdateItemLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/threemay-dev-update-item"
      }
    },
    "SearchItemsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/threemay-dev-search-items"
      }
    },
    "AddUserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/threemay-dev-add-user"
      }
    },
    "GetUserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/threemay-dev-get-user"
      }
    },
    "DeleteUserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/threemay-dev-delete-user"
      }
    },
    "UpdateUserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/threemay-dev-update-user"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "threemay",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:TagResource"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/threemay-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/threemay-dev*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "cognito-idp:*"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "threemay",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "PostItemLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/threemay/dev/1715673893466-2024-05-14T08:04:53.466Z/threemay.zip"
        },
        "Handler": "handlers/api/items/post-item/index.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "threemay-dev-post-item",
        "MemorySize": 256,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "USER_POOL_CLIENT_ID": {
              "Ref": "UserPoolClient"
            },
            "USER_POOL_ID": {
              "Ref": "UserPool"
            },
            "MONGO_URL": "mongodb+srv://hlynkao:treemay3may@treemay.ycpdw9g.mongodb.net/?retryWrites=true&w=majority&appName=treemay",
            "STAGE": "dev"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "PostItemLogGroup"
      ]
    },
    "GetItemsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/threemay/dev/1715673893466-2024-05-14T08:04:53.466Z/threemay.zip"
        },
        "Handler": "handlers/api/items/get-items/index.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "threemay-dev-get-items",
        "MemorySize": 256,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "USER_POOL_CLIENT_ID": {
              "Ref": "UserPoolClient"
            },
            "USER_POOL_ID": {
              "Ref": "UserPool"
            },
            "MONGO_URL": "mongodb+srv://hlynkao:treemay3may@treemay.ycpdw9g.mongodb.net/?retryWrites=true&w=majority&appName=treemay",
            "STAGE": "dev"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetItemsLogGroup"
      ]
    },
    "DeleteItemLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/threemay/dev/1715673893466-2024-05-14T08:04:53.466Z/threemay.zip"
        },
        "Handler": "handlers/api/items/delete-item/index.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "threemay-dev-delete-item",
        "MemorySize": 256,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "USER_POOL_CLIENT_ID": {
              "Ref": "UserPoolClient"
            },
            "USER_POOL_ID": {
              "Ref": "UserPool"
            },
            "MONGO_URL": "mongodb+srv://hlynkao:treemay3may@treemay.ycpdw9g.mongodb.net/?retryWrites=true&w=majority&appName=treemay",
            "STAGE": "dev"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DeleteItemLogGroup"
      ]
    },
    "GetSingleItemLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/threemay/dev/1715673893466-2024-05-14T08:04:53.466Z/threemay.zip"
        },
        "Handler": "handlers/api/items/get-item/index.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "threemay-dev-get-item",
        "MemorySize": 256,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "USER_POOL_CLIENT_ID": {
              "Ref": "UserPoolClient"
            },
            "USER_POOL_ID": {
              "Ref": "UserPool"
            },
            "MONGO_URL": "mongodb+srv://hlynkao:treemay3may@treemay.ycpdw9g.mongodb.net/?retryWrites=true&w=majority&appName=treemay",
            "STAGE": "dev"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetSingleItemLogGroup"
      ]
    },
    "UpdateItemLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/threemay/dev/1715673893466-2024-05-14T08:04:53.466Z/threemay.zip"
        },
        "Handler": "handlers/api/items/update-item/index.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "threemay-dev-update-item",
        "MemorySize": 256,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "USER_POOL_CLIENT_ID": {
              "Ref": "UserPoolClient"
            },
            "USER_POOL_ID": {
              "Ref": "UserPool"
            },
            "MONGO_URL": "mongodb+srv://hlynkao:treemay3may@treemay.ycpdw9g.mongodb.net/?retryWrites=true&w=majority&appName=treemay",
            "STAGE": "dev"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateItemLogGroup"
      ]
    },
    "SearchItemsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/threemay/dev/1715673893466-2024-05-14T08:04:53.466Z/threemay.zip"
        },
        "Handler": "handlers/api/items/search-items/index.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "threemay-dev-search-items",
        "MemorySize": 256,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "USER_POOL_CLIENT_ID": {
              "Ref": "UserPoolClient"
            },
            "USER_POOL_ID": {
              "Ref": "UserPool"
            },
            "MONGO_URL": "mongodb+srv://hlynkao:treemay3may@treemay.ycpdw9g.mongodb.net/?retryWrites=true&w=majority&appName=treemay",
            "STAGE": "dev"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SearchItemsLogGroup"
      ]
    },
    "AddUserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/threemay/dev/1715673893466-2024-05-14T08:04:53.466Z/threemay.zip"
        },
        "Handler": "handlers/api/users/add-user/index.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "threemay-dev-add-user",
        "MemorySize": 256,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "USER_POOL_CLIENT_ID": {
              "Ref": "UserPoolClient"
            },
            "USER_POOL_ID": {
              "Ref": "UserPool"
            },
            "MONGO_URL": "mongodb+srv://hlynkao:treemay3may@treemay.ycpdw9g.mongodb.net/?retryWrites=true&w=majority&appName=treemay",
            "STAGE": "dev"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "AddUserLogGroup"
      ]
    },
    "GetUserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/threemay/dev/1715673893466-2024-05-14T08:04:53.466Z/threemay.zip"
        },
        "Handler": "handlers/api/users/get-user/index.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "threemay-dev-get-user",
        "MemorySize": 256,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "USER_POOL_CLIENT_ID": {
              "Ref": "UserPoolClient"
            },
            "USER_POOL_ID": {
              "Ref": "UserPool"
            },
            "MONGO_URL": "mongodb+srv://hlynkao:treemay3may@treemay.ycpdw9g.mongodb.net/?retryWrites=true&w=majority&appName=treemay",
            "STAGE": "dev"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetUserLogGroup"
      ]
    },
    "DeleteUserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/threemay/dev/1715673893466-2024-05-14T08:04:53.466Z/threemay.zip"
        },
        "Handler": "handlers/api/users/delete-user/index.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "threemay-dev-delete-user",
        "MemorySize": 256,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "USER_POOL_CLIENT_ID": {
              "Ref": "UserPoolClient"
            },
            "USER_POOL_ID": {
              "Ref": "UserPool"
            },
            "MONGO_URL": "mongodb+srv://hlynkao:treemay3may@treemay.ycpdw9g.mongodb.net/?retryWrites=true&w=majority&appName=treemay",
            "STAGE": "dev"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DeleteUserLogGroup"
      ]
    },
    "UpdateUserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/threemay/dev/1715673893466-2024-05-14T08:04:53.466Z/threemay.zip"
        },
        "Handler": "handlers/api/users/update-user/index.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "threemay-dev-update-user",
        "MemorySize": 256,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "USER_POOL_CLIENT_ID": {
              "Ref": "UserPoolClient"
            },
            "USER_POOL_ID": {
              "Ref": "UserPool"
            },
            "MONGO_URL": "mongodb+srv://hlynkao:treemay3may@treemay.ycpdw9g.mongodb.net/?retryWrites=true&w=majority&appName=treemay",
            "STAGE": "dev"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateUserLogGroup"
      ]
    },
    "PostItemLambdaVersionGHKKQt8mh7G7X5gKowUPS9X4jvXFMlkAjc53LPjjb8M": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "PostItemLambdaFunction"
        },
        "CodeSha256": "FAWroo6tzRWw79r1vNSL0Aq2M4TaBWq9ZqD2At89Usc="
      }
    },
    "GetItemsLambdaVersionz50CUgCfsyDzP10qvVUewRjbQIV3hUKq4t1LWjuo": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetItemsLambdaFunction"
        },
        "CodeSha256": "FAWroo6tzRWw79r1vNSL0Aq2M4TaBWq9ZqD2At89Usc="
      }
    },
    "DeleteItemLambdaVersionyoKgOre25KSIc9ti2c9qA7YAw53cU0yzfEcWNVeb8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeleteItemLambdaFunction"
        },
        "CodeSha256": "FAWroo6tzRWw79r1vNSL0Aq2M4TaBWq9ZqD2At89Usc="
      }
    },
    "GetSingleItemLambdaVersionikAKK4gSSR8KbCrElqVVLses1e64MAAW8WFrIdLRE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetSingleItemLambdaFunction"
        },
        "CodeSha256": "FAWroo6tzRWw79r1vNSL0Aq2M4TaBWq9ZqD2At89Usc="
      }
    },
    "UpdateItemLambdaVersionFYZaGkKt7csPXpdxbTKKYGBHupg698MSTtMMRr15s": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateItemLambdaFunction"
        },
        "CodeSha256": "FAWroo6tzRWw79r1vNSL0Aq2M4TaBWq9ZqD2At89Usc="
      }
    },
    "SearchItemsLambdaVersionxBUPuzWOaAhPpBXTbQ8JRzSxyUOfRe7YSzwznn3Eaw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SearchItemsLambdaFunction"
        },
        "CodeSha256": "FAWroo6tzRWw79r1vNSL0Aq2M4TaBWq9ZqD2At89Usc="
      }
    },
    "AddUserLambdaVersiong21Rn2HQhJ4zA9jT18vY04ndai5OVnhUhsNFgH9W4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AddUserLambdaFunction"
        },
        "CodeSha256": "FAWroo6tzRWw79r1vNSL0Aq2M4TaBWq9ZqD2At89Usc="
      }
    },
    "GetUserLambdaVersionzlGQOYIVD4svfBfRNVJytsN6Hww7dGMKx5kebO6X3g": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetUserLambdaFunction"
        },
        "CodeSha256": "FAWroo6tzRWw79r1vNSL0Aq2M4TaBWq9ZqD2At89Usc="
      }
    },
    "DeleteUserLambdaVersionJQVHiDMCydQ7ofltb09b0tOoZcLPe7BavKAIbd62QJ0": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeleteUserLambdaFunction"
        },
        "CodeSha256": "FAWroo6tzRWw79r1vNSL0Aq2M4TaBWq9ZqD2At89Usc="
      }
    },
    "UpdateUserLambdaVersionGdTHtHlz8QCYBdvCLnqxnLWXqRhaGMabxJk0fW2S0": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateUserLambdaFunction"
        },
        "CodeSha256": "FAWroo6tzRWw79r1vNSL0Aq2M4TaBWq9ZqD2At89Usc="
      }
    },
    "HttpApi": {
      "Type": "AWS::ApiGatewayV2::Api",
      "Properties": {
        "Name": "dev-threemay",
        "ProtocolType": "HTTP"
      }
    },
    "HttpApiStage": {
      "Type": "AWS::ApiGatewayV2::Stage",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "StageName": "$default",
        "AutoDeploy": true,
        "DefaultRouteSettings": {
          "DetailedMetricsEnabled": false
        }
      }
    },
    "HttpApiAuthorizerApiGatewayAuthorizer": {
      "Type": "AWS::ApiGatewayV2::Authorizer",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "Name": "ApiGatewayAuthorizer",
        "IdentitySource": [
          "$request.header.Authorization"
        ],
        "AuthorizerType": "JWT",
        "JwtConfiguration": {
          "Audience": [
            {
              "Ref": "UserPoolClient"
            }
          ],
          "Issuer": {
            "Fn::Sub": [
              "https://cognito-idp.eu-central-1.amazonaws.com/${UserPoolId}",
              {
                "UserPoolId": {
                  "Ref": "UserPool"
                }
              }
            ]
          }
        }
      }
    },
    "PostItemLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "PostItemLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationPostItem": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "PostItemLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostItemsStatusVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /items/{status}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationPostItem"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationPostItem"
    },
    "GetItemsLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetItemsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetItems": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetItemsLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetItems": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /items",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetItems"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetItems"
    },
    "DeleteItemLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeleteItemLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationDeleteItem": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "DeleteItemLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteDeleteItemsItemidVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "DELETE /items/{itemId}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationDeleteItem"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationDeleteItem"
    },
    "GetSingleItemLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetSingleItemLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetSingleItem": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetSingleItemLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetItemsItemidVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /items/{itemId}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetSingleItem"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetSingleItem"
    },
    "UpdateItemLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateItemLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationUpdateItem": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "UpdateItemLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePutItemsItemidVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PUT /items/{itemId}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationUpdateItem"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationUpdateItem"
    },
    "SearchItemsLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SearchItemsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationSearchItems": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "SearchItemsLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetItemsSearch": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /items/search",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationSearchItems"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationSearchItems"
    },
    "AddUserLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AddUserLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationAddUser": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "AddUserLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostUsers": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /users",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationAddUser"
              }
            ]
          ]
        },
        "AuthorizationType": "JWT",
        "AuthorizerId": {
          "Ref": "HttpApiAuthorizerApiGatewayAuthorizer"
        }
      },
      "DependsOn": "HttpApiIntegrationAddUser"
    },
    "GetUserLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetUserLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetUser": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetUserLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetUsersUseridVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /users/{userId}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetUser"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetUser"
    },
    "DeleteUserLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeleteUserLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationDeleteUser": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "DeleteUserLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteDeleteUsersUseridVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "DELETE /users/{userId}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationDeleteUser"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationDeleteUser"
    },
    "UpdateUserLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateUserLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationUpdateUser": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "UpdateUserLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePutUserUseridVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PUT /user/{userId}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationUpdateUser"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationUpdateUser"
    },
    "UserPool": {
      "Type": "AWS::Cognito::UserPool",
      "Properties": {
        "UserPoolName": "threemay-dev-user-pool",
        "UsernameAttributes": [
          "email"
        ],
        "AutoVerifiedAttributes": [
          "email"
        ]
      }
    },
    "UserPoolClient": {
      "Type": "AWS::Cognito::UserPoolClient",
      "Properties": {
        "ClientName": "threemay-dev-user-pool-client",
        "UserPoolId": {
          "Ref": "UserPool"
        },
        "ExplicitAuthFlows": [
          "ALLOW_USER_PASSWORD_AUTH",
          "ALLOW_REFRESH_TOKEN_AUTH"
        ]
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-threemay-dev-ServerlessDeploymentBucketName"
      }
    },
    "PostItemLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "PostItemLambdaVersionGHKKQt8mh7G7X5gKowUPS9X4jvXFMlkAjc53LPjjb8M"
      },
      "Export": {
        "Name": "sls-threemay-dev-PostItemLambdaFunctionQualifiedArn"
      }
    },
    "GetItemsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetItemsLambdaVersionz50CUgCfsyDzP10qvVUewRjbQIV3hUKq4t1LWjuo"
      },
      "Export": {
        "Name": "sls-threemay-dev-GetItemsLambdaFunctionQualifiedArn"
      }
    },
    "DeleteItemLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeleteItemLambdaVersionyoKgOre25KSIc9ti2c9qA7YAw53cU0yzfEcWNVeb8"
      },
      "Export": {
        "Name": "sls-threemay-dev-DeleteItemLambdaFunctionQualifiedArn"
      }
    },
    "GetSingleItemLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetSingleItemLambdaVersionikAKK4gSSR8KbCrElqVVLses1e64MAAW8WFrIdLRE"
      },
      "Export": {
        "Name": "sls-threemay-dev-GetSingleItemLambdaFunctionQualifiedArn"
      }
    },
    "UpdateItemLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateItemLambdaVersionFYZaGkKt7csPXpdxbTKKYGBHupg698MSTtMMRr15s"
      },
      "Export": {
        "Name": "sls-threemay-dev-UpdateItemLambdaFunctionQualifiedArn"
      }
    },
    "SearchItemsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SearchItemsLambdaVersionxBUPuzWOaAhPpBXTbQ8JRzSxyUOfRe7YSzwznn3Eaw"
      },
      "Export": {
        "Name": "sls-threemay-dev-SearchItemsLambdaFunctionQualifiedArn"
      }
    },
    "AddUserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AddUserLambdaVersiong21Rn2HQhJ4zA9jT18vY04ndai5OVnhUhsNFgH9W4"
      },
      "Export": {
        "Name": "sls-threemay-dev-AddUserLambdaFunctionQualifiedArn"
      }
    },
    "GetUserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetUserLambdaVersionzlGQOYIVD4svfBfRNVJytsN6Hww7dGMKx5kebO6X3g"
      },
      "Export": {
        "Name": "sls-threemay-dev-GetUserLambdaFunctionQualifiedArn"
      }
    },
    "DeleteUserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeleteUserLambdaVersionJQVHiDMCydQ7ofltb09b0tOoZcLPe7BavKAIbd62QJ0"
      },
      "Export": {
        "Name": "sls-threemay-dev-DeleteUserLambdaFunctionQualifiedArn"
      }
    },
    "UpdateUserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateUserLambdaVersionGdTHtHlz8QCYBdvCLnqxnLWXqRhaGMabxJk0fW2S0"
      },
      "Export": {
        "Name": "sls-threemay-dev-UpdateUserLambdaFunctionQualifiedArn"
      }
    },
    "HttpApiId": {
      "Description": "Id of the HTTP API",
      "Value": {
        "Ref": "HttpApi"
      },
      "Export": {
        "Name": "sls-threemay-dev-HttpApiId"
      }
    },
    "HttpApiUrl": {
      "Description": "URL of the HTTP API",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "HttpApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            }
          ]
        ]
      },
      "Export": {
        "Name": "sls-threemay-dev-HttpApiUrl"
      }
    },
    "UserPoolId": {
      "Value": {
        "Ref": "UserPool"
      },
      "Export": {
        "Name": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "AWS::StackName"
              },
              "user-pool-id"
            ]
          ]
        }
      }
    },
    "UserPoolClientId": {
      "Value": {
        "Ref": "UserPoolClient"
      },
      "Export": {
        "Name": {
          "Fn::Join": [
            "-",
            [
              {
                "Ref": "AWS::StackName"
              },
              "user-pool-client-id"
            ]
          ]
        }
      }
    }
  }
}